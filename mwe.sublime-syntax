%YAML 1.2
---
name: mwe-debug-pretext
scope: text.xml.pretext.debug
file_extensions:
  - mwe
variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'
  end_input: '</input>'
contexts:
  main:
    - match: '(<)(sage)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
        0: meta.tag.pretext markup.other.interactive.pretext
      push:
        - include: tag-stuff
        - match: '/>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '>'
          scope: punctuation.definition.tag.end.fake.pretext
          push:
            - match: '(<)(input)[^>]*?(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
              push: "Packages/Python/Python.sublime-syntax"
              with_prototype:
                - match: '<!\[CDATA\['
                  scope: punctuation.definition.string.begin.pretext
                - match: ']]>'
                  scope: punctuation.definition.string.end.pretext
                - match: '(?={{end_input}})'
                  # captures:
                  #   1: punctuation.definition.tag.begin.pretext
                  #   2: entity.name.tag.localname.pretext
                  #   3: punctuation.definition.tag.end.pretext
                  #   0: meta.tag.pretext
                  pop: true
                # - include: comment
            - match: '(</?)(output)(>)'
              captures:
                1: punctuation.definition.tag.begin.pretext
                2: entity.name.tag.localname.pretext
                3: punctuation.definition.tag.end.pretext
                0: meta.tag.pretext
        - match: '(</)(sage)[^>]*?(>)'
          captures:
            1: punctuation.definition.tag.begin.pretext
            2: entity.name.tag.localname.pretext
            3: punctuation.definition.tag.end.pretext
            0: meta.tag.pretext
          pop: true
    # - match: '(<)(sage)[^>]*?(language\s*)(=)(\s*"r")[^>]*?'
    #   captures:
    #     1: punctuation.definition.tag.begin.pretext
    #     2: entity.name.tag.localname.pretext
    #     3: entity.other.attribute-name.namespace.pretext
    #     4: entity.other.attribute-name.pretext punctuation.separator.key-value.pretext
    #     5: entity.other.attribute-name.localname.pretext
    #     0: meta.tag.pretext
    #   push:
    #     - match: '/>'
    #       scope: punctuation.definition.tag.end.pretext
    #       pop: true
    #     - match: '(<)(input)[^>]*?(>)'
    #       captures:
    #         1: punctuation.definition.tag.begin.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext
    #     - match: '(</?)(output)(>)'
    #       captures:
    #         1: punctuation.definition.tag.begin.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext
    #     - include: tag-stuff
    #     - match: '>'
    #       scope: punctuation.definition.tag.end.pretext
    #       push:
    #         - meta_content_scope: source.r.embedded.pretext
    #         - include: 'scope:source.r'
    #       with_prototype:
    #         - match: '<!\[CDATA\['
    #           scope: punctuation.definition.string.begin.pretext
    #         - match: ']]>'
    #           scope: punctuation.definition.string.end.pretext
    #         - match: '(</)(input)(>)'
    #           captures:
    #             1: punctuation.definition.tag.begin.pretext
    #             2: entity.name.tag.localname.pretext
    #             3: punctuation.definition.tag.end.pretext
    #             0: meta.tag.pretext
    #           pop: true
    #     - match: '(</)(sage)[^>]*?(>)'
    #       captures:
    #         1: punctuation.definition.tag.end.pretext
    #         2: entity.name.tag.localname.pretext
    #         3: punctuation.definition.tag.end.pretext
    #         0: meta.tag.pretext
    #       pop: true
  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.single.pretext
        - match: "'"
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
  tag-stuff:
    - match: '(?:\s+|^){{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.pretext
        2: entity.other.attribute-name.pretext punctuation.separator.namespace.pretext
        3: entity.other.attribute-name.localname.pretext
        4: punctuation.separator.key-value.pretext
    - match: '(?:\s+|^)([[:alnum:]:_.-]+)\s*(=)'
      captures:
        1: invalid.illegal.bad-attribute-name.pretext
        2: punctuation.separator.key-value.pretext
    - include: double-quoted-string
    - include: single-quoted-string
  should-be-entity:
    - match: '&'
      scope: invalid.illegal.bad-ampersand.pretext
    - match: '<'
      scope: invalid.illegal.missing-entity.pretext
  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.double.pretext
        - match: '"'
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
  entity:
    - match: '(&)(?:{{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.pretext
      captures:
        1: punctuation.definition.constant.pretext
        2: punctuation.definition.constant.pretext
  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.begin.pretext
      push:
        - meta_scope: comment.block.pretext
        - match: '-->'
          scope: punctuation.definition.comment.end.pretext
          pop: true
        - match: '-{2,}'
          scope: invalid.illegal.double-hyphen-within-comment.pretext
