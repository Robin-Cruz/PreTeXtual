%YAML 1.2
# todo: incorporate latex snippets (latex-image, m, etc)
# todo: incorporate block divisions
# todo: lists and paragraphs

---
name: PreTeXt
file_extensions:
  - ptx
  - mbx # legacy
  # uncomment the next line to apply PTX styling by inline comment
  # first_line_match: '^<?xml version="1.0" encoding="UTF-8"?\s*<!--\s*MBX\s*-->'
scope: text.xml.pretext
variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '([[:alpha:]:_][[:alnum:]:_.-]*)'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'
  doctype: '(book|article|letter|memo'
  division: '(part|chapter|(?:sub)*section|exercises|references|appendix)(?=[\s>])'
  # rule out matching e.g. 'booktitle'
  division_data: '((?:sub)title|introduction|conclusion|notation-list|solution-list)'
  big_deal_list: '(list)'
  list: '(ul|ol|dl)'
  list_item: '(li)'
  paragraphs: '(paragraphs)'
  p: '(p)'
  statement: '(statement)'
  conjecture_like: '(axiom|conjecture|principle|heuristic|hypothesis|assumption)'
  definition_like: '(definition)'
  example_like: '(example|question|problem)'
  exercise_like: '(exercise)'
  remark_like: '(remark|convention|note|observation|warning|insight)'
  theorem_like: '(theorem|corollary|lemma|algorithm|proposition|claim|fact|identity|case|proof)'
  list_example_like: '(list_example_like)'
  project_like: '(project|activity|exploration|task|investigation)'
  computation_like: '(computation|technology)'
  blockquote: '(blockquote)'
  attribution: '(attribution)'
  contributors: '(contributors)'
  list-of: '(list-of)'
  prompt: '(prompt)'
  input: '(input)'
  output: '(output)'
  pre: '(pre)'
  sage: '(sage)'
  program: '(program)'
  console: '(console)'
  todo: '(todo)'
  notation: '(notation)'
  usage: '(usage)'
  caption: '(caption)'
  table: '(table)'
  table_subdivision: '(tabular|col|row|cell)'
  figure: '(figure)'
  listing: '(listing)'
  sidebyside: '(sidebyside)'
  poem: '(poem)'
  stanza: '(stanza)'
  tex_special_char: '(nbsp|ndash|mdash|ampersand|less|greater|ellipsis|hash|dollar|percent|circumflex|underscore|lbrace|rbrace|lbracket|rbracket|ldblbracket|rdblbracket|langle|rangle|tilde|backslash|asterisk|lq|rq|lsq|rsq|midpoint|swungdash|permille|pilcrow|section-mark|dimension|slash|solidus|ie|eg|etc|circa|tex|latex|trademark|registered|today|timeofday)'
  inline_markup: '(em|alert|q|sq|braces|brackets|dblbrackets|angles|term|foreign|abbr|acro|init|fn)'
  inline_code: '(c)'
  booktitle: '(booktitle)'
  url: '(url)'
  xref: '(xref)'
  index: '(index)'
  index_subdivision: '(main|sub|see)'
  math_inline: '(m)'
  math_displayed: '(m[ed]n?)'
  math_row: '(mrow)'
  math_row_intertext: '(intertext)'
  exercises: '(exercise(?:s|group)?)'
  exercises_help: '(hint|answer|solution)'
  webwork: '(webwork)'
  pg-macros: '(pg-macros)'
  macro-file: '(macro-file)'
  setup: '(setup)'
  stage: '(stage)'
  var: '(var)'
  static: '(static)'
  set: '(set)'
  member: '(member)'
  pg-code: '(pg-code)'
  video: '(video)'
  image: '(image)'
  description: '(description)'
  latex-image-code: '(latex-image-code)'
  asymptote: '(asymptote)'
  sageplot: '(sageplot)'
  quantity: '(quantity)'
  mag: '(mag)'
  unit: '(unit)'
  per: '(per)'
  docinfo: '(docinfo)'
  brandlogo: '(brandlogo)'
  website: '(website)'
  initialism: '(initialism)'
  macros: '(macros)'
  latex-image-preamble: '(latex-image-preamble)'
  feedback: '(feedback)'
  rename: '(rename)'
  frontmatter: '(frontmatter)'
  titlepage: '(titlepage)'
  author: '(author)'
  editor: '(editor)'
  contributor: '(contributor)'
  personname: '(personname)'
  department: '(department)'
  institution: '(institution)'
  email: '(email)'
  credit: '(credit)'
  date: '(date)'
  colophon: '(colophon)'
  copyright: '(copyright)'
  year: '(year)'
  holder: '(holder)'
  minilicense: '(minilicense)'
  shortlicense: '(shortlicense)'
  biography: '(biography)'
  abstract: '(abstract)'
  dedication: '(dedication)'
  acknowledgement: '(acknowledgement)'
  foreword: '(foreword)'
  preface: '(preface)'
  backmatter: '(backmatter)'
  appendix: '(appendix)'
  index-part: '(index-part)'
  index-list: '(index-list)'
  references: '(references)'
  biblio: '(biblio)'
  ibid: '(ibid)'
  journal: '(journal)'
  volume: '(volume)'
  number: '(number)'
  note: '(note)'

contexts:
  main:
    - match: '(</?)({{division}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.pretext
      push: ptx-subdivision
    - match: '(</?)(xref)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.pretext
      push: ptx-xref
    - match: '(</?)({{conjecture_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-conjecture-like
    - match: '(</?)({{definition_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-definition-like
    - match: '(</?)({{example_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-example-like
    - match: '(</?)({{exercise_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-exercise-like
    - match: '(</?)({{remark_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-remark-like
    - match: '(</?)({{theorem_like}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.localname.pretext
      push: ptx-theorem-like
    - match: '(<\?)\s*({{name}})'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.pretext
      push:
        - meta_scope: meta.tag.preprocessor.pretext
        - match: \?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - match: '\s+{{qualified_name}}'
          captures:
            1: entity.other.attribute-name.namespace.pretext
            2: entity.other.attribute-name.pretext punctuation.separator.namespace.pretext
            3: entity.other.attribute-name.localname.pretext
    - match: '(</?){{qualified_name}}'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: entity.name.tag.namespace.pretext
        3: entity.name.tag.pretext punctuation.separator.namespace.pretext
        4: entity.name.tag.localname.pretext
      push:
        - meta_scope: meta.tag.pretext
        - match: '/?>'
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: tag-stuff
    - match: '(</?)([[:digit:].-][[:alnum:]:_.-]*)'
      captures:
        1: punctuation.definition.tag.begin.pretext
        2: invalid.illegal.bad-tag-name.pretext
      push:
        - meta_scope: meta.tag.pretext
        - match: /?>
          scope: punctuation.definition.tag.end.pretext
          pop: true
        - include: tag-stuff
    - match: '<!\[CDATA\['
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.unquoted.cdata.pretext
        - match: ']]>'
          scope: punctuation.definition.string.end.pretext
          pop: true
    - include: entity
    - include: should-be-entity
    - include: comment
    - include: single-quoted-string
    - include: double-quoted-string
  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.pretext
      push:
        - meta_scope: comment.block.pretext
        - match: '-->'
          pop: true
  entity:
    - match: '(&)(?:{{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.pretext
      captures:
        1: punctuation.definition.constant.pretext
        2: punctuation.definition.constant.pretext
  should-be-entity:
    - match: '&'
      scope: invalid.illegal.bad-ampersand.pretext
    - match: '<'
      scope: invalid.illegal.missing-entity.pretext
    - match: '>'
      scope: invalid.illegal.missing-entity.pretext
  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.single.pretext
        - match: "'"
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.pretext
      push:
        - meta_scope: string.quoted.double.pretext
        - match: '"'
          scope: punctuation.definition.string.end.pretext
          pop: true
        - include: entity
        - include: should-be-entity
  tag-stuff:
    - match: '(?:\s+|^){{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.pretext
        2: entity.other.attribute-name.pretext punctuation.separator.namespace.pretext
        3: entity.other.attribute-name.localname.pretext
        4: punctuation.separator.key-value.pretext
    - include: double-quoted-string
    - include: single-quoted-string
  ptx-subdivision:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-xref:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-conjecture-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-definition-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-example-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-exercise-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-remark-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
  ptx-theorem-like:
    - meta_scope: meta.tag.pretext
    - match: '/?>'
      scope: punctuation.definition.tag.end.pretext
      pop: true
    - include: tag-stuff
